<?php

/**
 * This is the model base class for the table "cliente".
 * DO NOT MODIFY THIS FILE! It is automatically generated by AweCrud.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Cliente".
 *
 * Columns in table "cliente" available as properties of the model,
 * followed by relations of table "cliente" available as properties of the model.
 *
 * @property integer $id
 * @property string $nombre
 * @property string $apellido
 * @property string $documento
 * @property string $telefono
 * @property string $celular
 * @property string $email_1
 * @property string $email_2
 * @property string $estado
 * @property integer $usuario_creacion_id
 * @property integer $usuario_actualizacion_id
 * @property string $fecha_creacion
 * @property string $fecha_actualizacion
 *
 * @property Deuda[] $deudas
 * @property Pago[] $pagos
 */
abstract class BaseCliente extends AweActiveRecord {

    public static function model($className=__CLASS__) {
        return parent::model($className);
    }

    public function tableName() {
        return 'cliente';
    }

    public static function representingColumn() {
        return 'nombre';
    }

    public function rules() {
        return array(
            array('nombre, apellido, usuario_creacion_id', 'required'),
            array('usuario_creacion_id, usuario_actualizacion_id', 'numerical', 'integerOnly'=>true),
            array('nombre, apellido', 'length', 'max'=>32),
            array('documento', 'length', 'max'=>20),
            array('telefono, celular', 'length', 'max'=>24),
            array('email_1, email_2', 'length', 'max'=>255),
            array('estado', 'length', 'max'=>8),
            array('fecha_actualizacion', 'safe'),
            array('estado', 'in', 'range' => array('ACTIVO','INACTIVO')), // enum,
            array('documento, telefono, celular, email_1, email_2, estado, usuario_actualizacion_id, fecha_actualizacion', 'default', 'setOnEmpty' => true, 'value' => null),
            array('id, nombre, apellido, documento, telefono, celular, email_1, email_2, estado, usuario_creacion_id, usuario_actualizacion_id, fecha_creacion, fecha_actualizacion', 'safe', 'on'=>'search'),
        );
    }

    public function relations() {
        return array(
            'deudas' => array(self::HAS_MANY, 'Deuda', 'cliente_id'),
            'pagos' => array(self::HAS_MANY, 'Pago', 'cliente_id'),
        );
    }

    /**
     * @return array customized attribute labels (name=>label)
     */
    public function attributeLabels() {
        return array(
                'id' => Yii::t('app', 'ID'),
                'nombre' => Yii::t('app', 'Nombre'),
                'apellido' => Yii::t('app', 'Apellido'),
                'documento' => Yii::t('app', 'Documento'),
                'telefono' => Yii::t('app', 'Telefono'),
                'celular' => Yii::t('app', 'Celular'),
                'email_1' => Yii::t('app', 'Email 1'),
                'email_2' => Yii::t('app', 'Email 2'),
                'estado' => Yii::t('app', 'Estado'),
                'usuario_creacion_id' => Yii::t('app', 'Usuario Creacion'),
                'usuario_actualizacion_id' => Yii::t('app', 'Usuario Actualizacion'),
                'fecha_creacion' => Yii::t('app', 'Fecha Creacion'),
                'fecha_actualizacion' => Yii::t('app', 'Fecha Actualizacion'),
                'deudas' => null,
                'pagos' => null,
        );
    }

    public function search() {
        $criteria = new CDbCriteria;

        $criteria->compare('id', $this->id);
        $criteria->compare('nombre', $this->nombre, true);
        $criteria->compare('apellido', $this->apellido, true);
        $criteria->compare('documento', $this->documento, true);
        $criteria->compare('telefono', $this->telefono, true);
        $criteria->compare('celular', $this->celular, true);
        $criteria->compare('email_1', $this->email_1, true);
        $criteria->compare('email_2', $this->email_2, true);
        $criteria->compare('estado', $this->estado, true);
        $criteria->compare('usuario_creacion_id', $this->usuario_creacion_id);
        $criteria->compare('usuario_actualizacion_id', $this->usuario_actualizacion_id);
        $criteria->compare('fecha_creacion', $this->fecha_creacion, true);
        $criteria->compare('fecha_actualizacion', $this->fecha_actualizacion, true);

        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
        ));
    }

    public function behaviors() {
        return array_merge(array(
            'CTimestampBehavior' => array(
                'class' => 'zii.behaviors.CTimestampBehavior',
                'createAttribute' => 'fecha_creacion',
                'updateAttribute' => 'fecha_actualizacion',
                'timestampExpression' => new CDbExpression('NOW()'),
            )
        ), parent::behaviors());
    }
}